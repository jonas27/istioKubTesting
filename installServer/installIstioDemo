#!/bin/bash

# prepare system
sudo apt update && \
sudo apt install -y snapd curl docker.io && \
sudo systemctl enable docker && \
sudo apt-get install -y openssh-server && \
sudo apt update && \
sudo snap install helm --classic

printf "\n\nInstall kubeadm and swapoff\n\n" && \
sudo apt-get update && \
sudo apt-get install -y apt-transport-https && \
curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add - && \
echo deb https://apt.kubernetes.io/ kubernetes-xenial main | sudo tee -a /etc/apt/sources.list.d/kubernetes.list && \
printf " download deb https://apt.kubernetes.io/ kubernetes-xenial main" && \
sudo apt-get update && \
sudo apt-get install -y kubelet kubeadm kubectl && \
sudo apt-mark hold kubelet kubeadm kubectl && \
sudo swapoff -a && \
printf "\n\n Swap is off! \n"

printf "\n\nConfigure kubernetes\n\n" && \
sudo hostnamectl set-hostname ubuntu1-kubernetes-master && \
sudo hostnamectl set-hostname kubernetes-master && \
sudo kubeadm init --pod-network-cidr=10.244.0.0/16 && \
printf "\n\n Outputs kube join url with token and next run with run on single node \n" && \
sudo kubectl taint nodes --all node-role.kubernetes.io/master-

printf "\n\nlet user (joe) use kubectl without sudo\n\n" && \
mkdir -p $HOME/.kube && \
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config && \
sudo chown $USER $HOME/.kube/config


printf "\n\n install components (if pods pending there is probably routing problem --> install flannel \n\n"
printf "\n\n install Flannel for networking\n"
sudo kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml
printf "\n\n install k8s dashboard\n"
sudo kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/master/aio/deploy/recommended/kubernetes-dashboard.yaml

printf "\n\n Outputs kube join url with token and next run with run on single node \n" && \
sudo kubectl taint nodes --all node-role.kubernetes.io/master-

printf "\n\n install components (if pods pending there is probably routing problem --> install flannel \n\n" && \
printf "\n\n install Flannel for networking\n" && \
kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml && \
printf "\n\n install k8s dashboard\n" && \
kubectl create -f https://raw.githubusercontent.com/kubernetes/dashboard/master/aio/deploy/recommended/kubernetes-dashboard.yaml

# Create sample user
#kubectl create -f https://raw.githubusercontent.com/jonas27/istioKubTesting/master/helloService/sampleUser
#export ALL="kubectl get all --all-namespaces"


INstall Completed!!!!!!!!\




printf "\n\n Install Istio \n\n"  && \
curl -L https://git.io/getLatestIstio | sh - && \
cd $(ls |grep istio-1.) && \
export PATH=$PWD/bin:$PATH && \
kubectl apply -f install/kubernetes/helm/istio/templates/crds.yaml

# with security
#kubectl apply -f install/kubernetes/helm/istio/charts/certmanager/templates/crds.yaml --> this makes problems

export GETALL="kubectl get all --all-namespaces"

kubectl apply -f install/kubernetes/helm/istio/templates/crds.yaml && \
helm template install/kubernetes/helm/istio --name istio --namespace istio-system \
--set gateways.istio-ingressgateway.type=NodePort \
--set gateways.istio-egressgateway.type=NodePort > installIstio && \
kubectl create namespace istio-system && \
kubectl apply -f install/kubernetes/istio-demo.yaml && \
kubectl apply -f installIstio && \
kubectl label namespace default istio-injection=enabled







kubectl apply -f install/kubernetes/helm/istio/templates/crds.yaml && \
printf "\n\n enable auto injection for namespace=hello-service \n" && \
kubectl label namespace default istio-injection=enabled

sudo kubectl taint nodes --all node-role.kubernetes.io/master-


kubectl apply -f install/kubernetes/helm/istio/templates/crds.yaml && \
printf "\n\n without TLS\n"  && \
kubectl apply -f install/kubernetes/istio-demo.yaml && \
printf "\n\n enable auto injection for namespace=hello-service \n" && \





kubectl get node -o wide

kubectl -n kube-system describe secret $(kubectl -n kube-system get secret | grep admin-user | awk '{print $1}')

{
   "default-runtime": "nvidia",
   "runtimes": {
       "nvidia": {
           "path": "/usr/bin/nvidia-container-runtime",
           "runtimeArgs": []
       }
   },
   "insecure-registries":["researchregistry:5000"]
}

sudo tee /etc/docker/daemon.json <<EOF
{
    "default-runtime": "nvidia",
    "runtimes": {
        "nvidia": {
            "path": "/usr/bin/nvidia-container-runtime",
            "runtimeArgs": []
        }
    },
    "insecure-registries":["researchregistry:5000"]
}
EOF




install istio with HELM:
